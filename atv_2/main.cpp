#include <GL/glut.h>
#include <stdlib.h>

GLubyte circulos[] = {
0x00,0x00,0x00,0x00
,0x00,0x0f,0xe0,0x00
,0x00,0x70,0x1c,0x00
,0x01,0x80,0x03,0x00
,0x02,0x00,0x00,0x80
,0x04,0x0f,0xe0,0x40
,0x08,0x30,0x18,0x20
,0x10,0x40,0x04,0x10
,0x10,0x87,0xc2,0x10
,0x21,0x18,0x31,0x08
,0x22,0x27,0xc8,0x88
,0x22,0x48,0x24,0x88
,0x44,0x53,0x94,0x44
,0x44,0xa4,0x4a,0x44
,0x44,0xa8,0x2a,0x44
,0x44,0xa8,0x2a,0x44
,0x44,0xa8,0x2a,0x44
,0x44,0xa4,0x4a,0x44
,0x44,0x53,0x94,0x44
,0x22,0x48,0x24,0x88
,0x22,0x27,0xc8,0x88
,0x21,0x18,0x31,0x08
,0x10,0x87,0xc2,0x10
,0x10,0x40,0x04,0x10
,0x08,0x30,0x18,0x20
,0x04,0x0f,0xe0,0x40
,0x02,0x00,0x00,0x80
,0x01,0x80,0x03,0x00
,0x00,0x70,0x1c,0x00
,0x00,0x0f,0xe0,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
};

GLubyte casa[] = {
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x3f,0xff,0xff,0xfe
,0x20,0x00,0x60,0x8a
,0x20,0x00,0x60,0x8a
,0x20,0x00,0x60,0x8a
,0x20,0x00,0x60,0xaa
,0x20,0x00,0x60,0x8a
,0x23,0xfc,0x60,0x8a
,0x22,0x44,0x60,0xfa
,0x22,0x44,0x60,0x02
,0x23,0xfc,0x60,0x02
,0x22,0x44,0x60,0x02
,0x22,0x44,0x60,0x02
,0x23,0xfc,0x60,0x02
,0x20,0x00,0x60,0x02
,0x20,0x00,0x60,0x02
,0x20,0x00,0x60,0x02
,0x3f,0xff,0xff,0xfe
,0x20,0x00,0x30,0x06
,0x20,0x00,0x18,0x0c
,0x20,0x00,0x08,0x18
,0x20,0x00,0x0c,0x30
,0x20,0x00,0x04,0x60
,0x20,0x00,0x06,0xc0
,0x3f,0xff,0xff,0x80
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
};
GLfloat r,g,b,r2,g2,b2;

int status1 = 0;
int status2 = 1;
void init(void);
void display(void);
void keyboard(unsigned char key, int x, int y);
void mouse(int button, int state, int x, int y);



int main(int argc, char** argv){
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (512, 256);
    glutInitWindowPosition (150, 100);
    glutCreateWindow ("Preenchendo regiões");
    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}

void init(void){
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glOrtho (0, 512, 0, 236, -1 ,1);
    r2=r=0; g2=g=1; b2=b=0;
}

void display(void){
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(r, g, b);
    glEnable(GL_POLYGON_STIPPLE);

    if(status1 == 0){
            glPolygonStipple(circulos);
    }
    else{
            glPolygonStipple(casa);
    }
    glBegin(GL_POLYGON);
    glVertex2i(30,15);
    glVertex2i(245,15);
    glVertex2i(245,245);
    glVertex2i(30,245);
    glEnd();

    glColor3f(r2, g2, b2);
    if(status2 == 0){
        glPolygonStipple(circulos);
    }else{
        glPolygonStipple(casa);
    }
    glBegin(GL_POLYGON);
    glVertex2i(300,15);
    glVertex2i(500,15);
    glVertex2i(500,245);
    glVertex2i(300,245);
    glEnd();

    glFlush();
    glutSwapBuffers();
}


void keyboard(unsigned char key, int x, int y){
    switch (key){
        case 27:exit(0);break;
        }
    }

void mouse(int button, int state, int x, int y){
    switch (button){
        case GLUT_LEFT_BUTTON:
            if (state == GLUT_DOWN){
                    if(x >= 30 && x <= 245 && y >= 15 && y <= 245){
                        r=(GLfloat)rand()/(RAND_MAX+1.0);
                        g=(GLfloat)rand()/(RAND_MAX+1.0);
                        b=(GLfloat)rand()/(RAND_MAX+1.0);
                        if(status1 == 0){
                                status1 = 1;
                        }else{
                            status1 = 0;
                            }
                        glutPostRedisplay();
                    }
                    if(x >= 300 && x <= 500 && y >= 15 && y <= 245){
                            r2=(GLfloat)rand()/(RAND_MAX+1.0);
                            g2=(GLfloat)rand()/(RAND_MAX+1.0);
                            b2=(GLfloat)rand()/(RAND_MAX+1.0);
                            if(status2 == 0){
                                    status2 = 1;
                            }
                            else{
                                    status2 = 0;
                            }
          glutPostRedisplay();
        }

	}
	break;
  }
}

